head	1.1;
access;
symbols;
locks
	punisher:1.1; strict;
comment	@ * @;


1.1
date	2010.10.12.00.57.07;	author punisher;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 *Cesar Vargas
 *AI
 *Queens College Fall 2010
 *Astar.h
 */
#ifndef ASTAR_H_
#define ASTAR_H_
#include "Node.h"
#include "Queue.h"
#include "Square.h"
#include <iostream>
using namespace std;
class Astar{
 public:
 Astar(Square s,Square g):start(s),goal(g){}
  void begin();
  bool isGoal(node in, node g);
  void expand(node input);
  node find_goal();
  void add_expanded(Queue<node> temp,node father);
 private:
  node start,goal;
  Queue<node> openlist;
  Queue<node> closedlist;
};
#endif
@
