head	1.1;
access;
symbols;
locks
	punisher:1.1; strict;
comment	@// @;


1.1
date	2010.10.12.00.57.34;	author punisher;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#include "Astar.h"
void Astar::begin(){
  start.create_state(goal);
  openlist.insert(start);
  node current_node;
  while( !openlist.isEmpty() ){
    current_node = openlist.del();
    if ( isGoal(current_node,goal) ){
      cout << "We have reached the gaol" << endl;
      cout << current_node << endl;
      break;
    } else {
      cout << "Not yet, let's expand the current_node node." << endl;
      cout << current_node << endl;
      expand(current_node);
    }
  }
  // if ( start.data == goal.data )
  //   cout << " we have reached out goal" << endl;
  // cout << " we have not reached out goal " << endl;
}
bool Astar::isGoal(node in, node g){
  if ( in == g )
    return true;
  return false;
}
void Astar::expand(node input){
  cout << "We are in the expanding function. " << endl;
  node tempn;
  Queue<node> tempq;
  input.find_zero();
  if ( input.can_move_up() ){
    tempn = input;
    tempn.move_up();
    tempn.inc_g();
    tempn.create_state(goal);
    tempq.insert(tempn);}
  if ( input.can_move_right() ){
    tempn = input;
    tempn.move_right();
    tempn.inc_g();
    tempn.create_state(goal);
    tempq.insert(tempn);}
  if ( input.can_move_bottom() ){
    tempn = input;
    tempn.move_bottom();
    tempn.inc_g();
    tempn.create_state(goal);
    tempq.insert(tempn);}
  if ( input.can_move_left() ){
    tempn = input;
    tempn.move_left();
    tempn.inc_g();
    tempn.create_state(goal);
    tempq.insert(tempn);}
  tempq.print();
  add_expanded(tempq,input);
}
ostream& operator<<(ostream &os, Square s){
  int i,j;
  for ( i=1; i < 4; i++ ){
    for( j=1; j < 4 ; j++ ){
      os << s.board[i][j];
    }
  }
  return os;
}
ostream& operator<<(ostream &os, node s){
  return  os << s.data << " h " << s.h << " g " << s.g << " f " << s.f << " ";
}
void Astar::add_expanded(Queue<node> temp, node father){
  node added;
  while ( !temp.isEmpty() ){
    added = temp.del();
    if ( !openlist.isMember(added) && !closedlist.isMember(added) ){
      added.set_link(&father);
      openlist.insert(added);
    } 
  }
}
// node Astar::find_goal(node input){
//   if (
// }
@
